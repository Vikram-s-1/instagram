import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '../supabaseClient';
import '../styles/CreatePost.css';

function CreatePost() {
  const [image, setImage] = useState<File | null>(null);
  const [caption, setCaption] = useState('');
  const [location, setLocation] = useState('');
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (!e.target.files || !e.target.files[0]) return;
    setImage(e.target.files[0]);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!image) {
      setError('Please select an image');
      return;
    }

    try {
      setLoading(true);
      const user = supabase.auth.user();
      
      if (!user) {
        throw new Error('User not authenticated');
      }

      // Upload image to Supabase Storage
      const fileExt = image.name.split('.').pop();
      const fileName = `${Math.random()}.${fileExt}`;
      const filePath = `posts/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('posts')
        .upload(filePath, image);

      if (uploadError) throw uploadError;

      // Get public URL of uploaded image
      const { data: { publicUrl } } = supabase.storage
        .from('posts')
        .getPublicUrl(filePath);

      // Create post in database
      const { error: postError } = await supabase
        .from('posts')
        .insert({
          user_id: user.id,
          image_url: publicUrl,
          caption,
          location
        });

      if (postError) throw postError;

      // Redirect to home page after successful post
      navigate('/');
    } catch (error: any) {
      console.error('Error creating post:', error);
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="create-post-container">
      <form onSubmit={handleSubmit} className="create-post-form">
        <h2>Create New Post</h2>
        {error && <div className="error-message">{error}</div>}
        
        <div className="image-upload">
          {image ? (
            <img src={URL.createObjectURL(image)} alt="Preview" className="image-preview" />
          ) : (
            <div className="upload-placeholder">
              <input
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                id="image-upload"
              />
              <label htmlFor="image-upload">Select Image</label>
            </div>
          )}
        </div>

        <textarea
          placeholder="Write a caption..."
          value={caption}
          onChange={(e) => setCaption(e.target.value)}
          className="caption-input"
        />

        <input
          type="text"
          placeholder="Add location"
          value={location}
          onChange={(e) => setLocation(e.target.value)}
          className="location-input"
        />

        <button type="submit" disabled={loading || !image}>
          {loading ? 'Posting...' : 'Share'}
        </button>
      </form>
    </div>
  );
}

export default CreatePost;
